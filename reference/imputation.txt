# imputation
# Load necessary library
library(BiocManager)

BiocManager::install("pcaMethods")
BiocManager::install("impute")

install.packages("imputeLCMD")

update.packages(ask = FALSE)

library(impute)
library(imputeLCMD)

# Step 1: Calculate the missing rate for each target, remove injectionID column
missing_rate <- colMeans(is.na(df[, -1]))

# Step 2: Remove targets with more than 20% missing data
df_filtered <- df[, c(TRUE, missing_rate <= 0.20)]

# Step 3: Impute the remaining missing data using QRILC
# Extract the data to be imputed (excluding the SampleID column)
data_to_impute <- df_filtered[, -1]

# Example: log2-transform if not already done
data_log <- log2(data_to_impute)  

# QRILC only accepts matrices
data_matrix <- as.matrix(data_log)

set.seed(123)
# Impute using MinProb
imputed <- imputeLCMD::impute.QRILC(data_matrix, tune.sigma = 1)[[1]]

# Check result
str(imputed)  # should be a matrix

imputed_df <- cbind(injectionID = df[,1], imputed)

# imputated_df <- read.csv("imputated.csv", header = TRUE)
colnames(imputated_df)[1] <- "injectionID"

merged_df <- merge(imputated_df, sample_info, by = "injectionID", all.x = TRUE)


impute.QRILC
function (dataSet.mvs, tune.sigma = 1) 
{
    nFeatures = dim(dataSet.mvs)[1]
    nSamples = dim(dataSet.mvs)[2]
    dataSet.imputed = dataSet.mvs
    QR.obj = list()
    for (i in 1:nSamples) {
        curr.sample = dataSet.mvs[, i]
        pNAs = length(which(is.na(curr.sample)))/length(curr.sample)
        upper.q = 0.99
        q.normal = qnorm(seq((pNAs + 0.001), (upper.q + 0.001), 
            (upper.q - pNAs)/(upper.q * 100)), mean = 0, sd = 1)
        q.curr.sample = quantile(curr.sample, probs = seq(0.001, 
            (upper.q + 0.001), 0.01), na.rm = T)
        temp.QR = lm(q.curr.sample ~ q.normal)
        QR.obj[[i]] = temp.QR
        mean.CDD = temp.QR$coefficients[1]
        sd.CDD = as.numeric(temp.QR$coefficients[2])
        data.to.imp = rtmvnorm(n = nFeatures, mean = mean.CDD, 
            sigma = sd.CDD * tune.sigma, upper = qnorm((pNAs + 
                0.001), mean = mean.CDD, sd = sd.CDD), algorithm = c("gibbs"))
        curr.sample.imputed = curr.sample
        curr.sample.imputed[which(is.na(curr.sample))] = data.to.imp[which(is.na(curr.sample))]
        dataSet.imputed[, i] = curr.sample.imputed
    }
    results = list(dataSet.imputed, QR.obj)
    return(results)
}
<bytecode: 0x000001dc95c206c0>
<environment: namespace:imputeLCMD>